import os
from langchain.chat_models import init_chat_model
from langchain_core.messages import HumanMessage
import json
import re
from configs import configs
from fastapi.openapi.docs import get_swagger_ui_html
from fastapi import FastAPI, HTTPException, status
from pydantic import BaseModel
import mysql.connector
from fastapi.staticfiles import StaticFiles
import hashlib
import uuid
import base64
def start_app():
    app = FastAPI(
        title=configs.PROJECT_NAME + ' - ' + configs.ENV, 
        version=configs.PROJECT_VERSION, 
        debug=configs.DEBUG_MODE, 
        docs_url=None,
        openapi_url="/openapi.json",
        separate_input_output_schemas=False
    )
    app.mount("/static", StaticFiles(directory="static"), name="static")
    @app.get("/docs", include_in_schema=False)
    async def custom_swagger_ui_html():
        return get_swagger_ui_html(
            openapi_url=app.openapi_url,
            title=app.title + " - Swagger UI", 
            oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
            swagger_js_url="/static/swagger/swagger-ui-bundle.js",
            swagger_css_url="/static/swagger/swagger-ui.css",
        )
    
    
    # Connect to the database
    mydb = mysql.connector.connect(
        host=configs.MYSQL_HOST,
        user=configs.MYSQL_USER,
        password=configs.MYSQL_PASSWORD,
        database=configs.MYSQL_DB
    )




    def build_select_query_param(data: dict, business_id: str) -> tuple[str, list]:
        try:
            if data.get("action", "").lower() != "select":
                raise ValueError("Ch·ªâ h·ªó tr·ª£ h√†nh ƒë·ªông 'select'")

            table = "tbl_" + data["table"]
            conditions = data.get("condition", {})

            where_clauses = []
            params = []
            try:
                uuid_bytes = uuid.UUID(business_id).bytes
            except ValueError:
                raise ValueError("business_id kh√¥ng h·ª£p l·ªá (kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng UUID)")

            # √âp bu·ªôc l·ªçc theo business_id
            where_clauses.append("`business_id` = %s")
            params.append(uuid_bytes)

            for key, value in conditions.items():
                if key in ["status", "sub_status"] and isinstance(value, list):
                    placeholders = ', '.join(['%s'] * len(value))
                    where_clauses.append(f"`{key}` IN ({placeholders})")
                    params.extend(value)
                else:
                    where_clauses.append(f"`{key}` = %s")
                    params.append(value)

            query = f"SELECT * FROM `{table}`"
            if where_clauses:
                query += " WHERE " + " AND ".join(where_clauses)

            return query, params
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"L·ªói khi x√¢y d·ª±ng c√¢u truy v·∫•n: {str(e)}"
            )


    def safe_decode(value):
        if isinstance(value, bytes):
            try:
                return value.decode("utf-8")
            except UnicodeDecodeError:
                return base64.b64encode(value).decode("utf-8")
        return value

    @app.get("/")
    async def execute(business_id: str,text:str):
        # print("üîç Nh·∫≠n c√¢u truy v·∫•n:", text)
        cursor = mydb.cursor()
        os.environ["LANGSMITH_TRACING"] = "true"
        os.environ["LANGSMITH_API_KEY"] = "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"
        os.environ["LANGSMITH_PROJECT"] = "default"
        os.environ["GOOGLE_API_KEY"] = "AIzaSyCouB8i4EIecncz8fPKGYtqYqlpa-FgiKo"

        # Kh·ªüi t·∫°o m√¥ h√¨nh Gemini t·ª´ Google
        model = init_chat_model("gemini-2.0-flash", model_provider="google_genai")

        # C√¢u truy v·∫•n ti·∫øng Vi·ªát c·∫ßn ph√¢n t√≠ch
        query = text

        # G·ª≠i c√¢u truy v·∫•n v√†o m√¥ h√¨nh ƒë·ªÉ ph√¢n t√≠ch
        prompt = f"""
        D·ª±a tr√™n c√¢u sau:
        "{query}"

        H√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON theo ƒë·ªãnh d·∫°ng sau:
        {{
        "table": "customer",
        "action": "select",
        "condition": th√¥ng tin c·∫ßn t√¨m ki·∫øm d∆∞·ªõi d·∫°ng json,
        }}
        Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng JSON.
        key l√† "table", "action", "condition","created_at" ƒë·ªÉ tr·∫£ l·ªùi cho c√¢u h·ªèi ng√†y th√°ng nƒÉm.
        key c·ªßa b·∫£ng customer l√† "name","phone","dob","address","companyName","customerType","cmnd","email","mst".
        key c·ªßa b·∫£ng product l√† "name","capital_price","sale_price","branchProduct","category".
        key c·ªßa b·∫£ng supplier l√† "name","phone","address","email","company","mst","branch".
        key c·ªßa b·∫£ng purchase_orders l√† "totalAmount","totalAmountPaid","status" l√† [Processing, Canceled, Completed, None],"sub_status" l√†[ None,Not Paid ].
        key c·ªßa b·∫£ng sale_orders l√† "totalAmount","totalAmountPaid","status" l√† [Processing, Canceled, Completed, None],"sub_status" l√† [ None,Not Paid ].
        """
        
        response = model.invoke(prompt)
        raw_output = response.content.strip()
        if raw_output.startswith("```json"):
            raw_output = re.sub(r"^```json\s*|\s*```$", "", raw_output.strip())

        # Parse JSON
        try:
            data = json.loads(raw_output)
            
            query, params = build_select_query_param(data,business_id)
            print("üîç C√¢u truy v·∫•n SQL:", query)
            print("üìã Tham s·ªë:", params)
            cursor.execute(query, params)
            results = cursor.fetchall()
            print("üîç K·∫øt qu·∫£ truy v·∫•n:", results)
            columns = [desc[0] for desc in cursor.description]
            # Tr·∫£ v·ªÅ JSON an to√†n
            output = []
            for row in results:
                row_dict = {col: safe_decode(val) for col, val in zip(columns, row)}
                output.append(row_dict)
            response = model.invoke(f"""D·ª±a tr√™n k·∫øt qu·∫£ {output}, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng kh√¥ng c·∫ßn TR·∫¢ L·ªúI 'id','created_at','updated_at' v√† 'deleted_at','is_blocked',c√°c t·ª´ d√≠nh ch·ªØ id,QR, nh·ªØng t·ª´ c√≥ t√≠nh ch·∫•t nh∆∞ m√£.
                                    n·∫øu {output} l√† r·ªóng th√¨ tr·∫£ l·ªùi 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o' v√† kh√¥ng c·∫ßn ƒë∆∞a ra c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.""")
            return {"message":response.content.strip()}
        except json.JSONDecodeError as e:
            print("‚ùå L·ªói khi parse JSON:", e)
            print("üîé Raw response:\n", raw_output)
    return app

app= start_app()

